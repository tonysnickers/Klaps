<div class="dashboard">
    <div class="navbar">
      <input id="toggle" type="checkbox">
      <label for="toggle" class="hamburger">
        <div class="top-bun"></div>
        <div class="meat"></div>
        <div class="bottom-bun"></div>
      </label>

      <div class="nav py-4" style="
        z-index: 4;">
        <div class="d-flex flex-column justify-content-start">
          <%= link_to "HOME", dashboard_path, class: 'px-4 py-2  text-decoration-none text-color' %>
          <%= link_to "LOGOUT", destroy_user_session_path, data: {turbo_method: :delete}, class: 'px-4 py-2  text-decoration-none text-color' %>
        </div>
      </div>
    </div>

    <div class="dash-text text-center my-4">
      <% if current_user.username.empty? %>
        <h1 class="hello">Welcome</h1>
      <% else %>
        <h1 class="hello">Welcome <%= current_user.username %> ðŸ‘‹</h1>
      <% end %>
    </div>

    <%= link_to dashboard_index_path, class: "text-decoration-none" do %>
      <div class="dashboard-header justify-content-center align-items-center text-center">
        <%= image_tag 'Dashboard-card.png', class:"img" %>
        <div class="justify-content-center align-items-center text-center">
          <h1 class="find-a-movie">Find a movie</h1>
        </div>
      </div>
    <% end %>

  <div class="dashboard-card my-5">
    <div class="dahboard-card-content ">
      <div class="dashboard-option">
        <%= link_to friends_path, class: "text-decoration-none" do %>
          <p>Add some friends</p>
        <% end %>
      </div>
    </div>
  </div>

  <div class="dashboard-card my-5">
    <div class="dahboard-card-content ">

      <div class="">

        <div class="d-flex justify-content-between mb-2">
          <h3 class="ms-3">My wishlist</h3>

          <%= link_to wishes_path, class: "text-decoration-none text-white-50" do %>
            <h5 class="me-3">See all <i class="fa-solid fa-arrow-right-long"></i></h5>
          <% end %>
        </div>

        <% movies = [] %>
          <% Wish.where(user_id: current_user.id).each do |wish| %>
          <% movies << wish.movie_id %>
        <% end %>

        <% if movies.empty? %>
          <div class="card-carousel">
            <div class="card-empty">
              <p>No wishes here, take the quizz to add films</p>
            </div>
          </div>
        <% else %>
          <div class="card-carousel">

            <div class="card" id="1">
              <img src="<%=  Movie.find(movies[0]).poster %>">
            </div>

            <div class="card" id="2">
              <img src="<%=  Movie.find(movies[1]).poster %>">
            </div>

            <div class="card" id="3">
              <img src="<%=  Movie.find(movies[2]).poster %>">
            </div>

            <div class="card" id="4">
              <img src="<%=  Movie.find(movies[3]).poster %>">
            </div>

            <div class="card" id="5">
              <img src="<%=  Movie.find(movies[4]).poster %>">
            </div>

            <a href="#" class="visuallyhidden card-controller">Carousel controller</a>
          </div>
        <% end %>

      </div>

    </div>
  </div>

</div>

<script>
  const cardsContainer = document.querySelector(".card-carousel");
  const cardsController = document.querySelector(
    ".card-carousel + .card-controller"
  );

  class DraggingEvent {
    constructor(target = undefined) {
      this.target = target;
    }

    event(callback) {
      let handler;

      this.target.addEventListener("mousedown", (e) => {
        e.preventDefault();

        handler = callback(e);

        window.addEventListener("mousemove", handler);

        document.addEventListener("mouseleave", clearDraggingEvent);

        window.addEventListener("mouseup", clearDraggingEvent);

        function clearDraggingEvent() {
          window.removeEventListener("mousemove", handler);
          window.removeEventListener("mouseup", clearDraggingEvent);

          document.removeEventListener("mouseleave", clearDraggingEvent);

          handler(null);
        }
      });

      this.target.addEventListener("touchstart", (e) => {
        handler = callback(e);

        window.addEventListener("touchmove", handler);

        window.addEventListener("touchend", clearDraggingEvent);

        document.body.addEventListener("mouseleave", clearDraggingEvent);

        function clearDraggingEvent() {
          window.removeEventListener("touchmove", handler);
          window.removeEventListener("touchend", clearDraggingEvent);

          handler(null);
        }
      });
    }

    // Get the distance that the user has dragged
    getDistance(callback) {
      function distanceInit(e1) {
        let startingX, startingY;

        if ("touches" in e1) {
          startingX = e1.touches[0].clientX;
          startingY = e1.touches[0].clientY;
        } else {
          startingX = e1.clientX;
          startingY = e1.clientY;
        }

        return function (e2) {
          if (e2 === null) {
            return callback(null);
          } else {
            if ("touches" in e2) {
              return callback({
                x: e2.touches[0].clientX - startingX,
                y: e2.touches[0].clientY - startingY
              });
            } else {
              return callback({
                x: e2.clientX - startingX,
                y: e2.clientY - startingY
              });
            }
          }
        };
      }

      this.event(distanceInit);
    }
  }

  class CardCarousel extends DraggingEvent {
    constructor(container, controller = undefined) {
      super(container);

      // DOM elements
      this.container = container;
      this.controllerElement = controller;
      this.cards = container.querySelectorAll(".card");

      // Carousel data
      this.centerIndex = (this.cards.length - 1) / 2;
      this.cardWidth =
        (this.cards[0].offsetWidth / this.container.offsetWidth) * 100;
      this.xScale = {};

      // Resizing
      window.addEventListener("resize", this.updateCardWidth.bind(this));

      if (this.controllerElement) {
        this.controllerElement.addEventListener(
          "keydown",
          this.controller.bind(this)
        );
      }

      // Initializers
      this.build();

      // Bind dragging event
      super.getDistance(this.moveCards.bind(this));
    }

    updateCardWidth() {
      this.cardWidth =
        (this.cards[0].offsetWidth / this.container.offsetWidth) * 100;

      this.build();
    }

    build(fix = 0) {
      for (let i = 0; i < this.cards.length; i++) {
        const x = i - this.centerIndex;
        const scale = this.calcScale(x);
        const scale2 = this.calcScale2(x);
        const zIndex = -Math.abs(i - this.centerIndex);

        const leftPos = this.calcPos(x, scale2);

        this.xScale[x] = this.cards[i];

        this.updateCards(this.cards[i], {
          x: x,
          scale: scale,
          leftPos: leftPos,
          zIndex: zIndex
        });
      }
    }

    controller(e) {
      const temp = { ...this.xScale };

      if (e.keyCode === 39) {
        // Left arrow
        for (let x in this.xScale) {
          const newX =
            parseInt(x) - 1 < -this.centerIndex
              ? this.centerIndex
              : parseInt(x) - 1;

          temp[newX] = this.xScale[x];
        }
      }

      if (e.keyCode == 37) {
        // Right arrow
        for (let x in this.xScale) {
          const newX =
            parseInt(x) + 1 > this.centerIndex
              ? -this.centerIndex
              : parseInt(x) + 1;

          temp[newX] = this.xScale[x];
        }
      }

      this.xScale = temp;

      for (let x in temp) {
        const scale = this.calcScale(x),
          scale2 = this.calcScale2(x),
          leftPos = this.calcPos(x, scale2),
          zIndex = -Math.abs(x);

        this.updateCards(this.xScale[x], {
          x: x,
          scale: scale,
          leftPos: leftPos,
          zIndex: zIndex
        });
      }
    }

    calcPos(x, scale) {
      let formula;

      if (x < 0) {
        formula = (scale * 100 - this.cardWidth) / 2;

        return formula;
      } else if (x > 0) {
        formula = 100 - (scale * 100 + this.cardWidth) / 2;

        return formula;
      } else {
        formula = 100 - (scale * 100 + this.cardWidth) / 2;

        return formula;
      }
    }

    updateCards(card, data) {
      if (data.x || data.x == 0) {
        card.setAttribute("data-x", data.x);
      }

      if (data.scale || data.scale == 0) {
        card.style.transform = `scale(${data.scale})`;

        if (data.scale == 0) {
          card.style.opacity = data.scale;
        } else {
          card.style.opacity = 1;
        }
      }

      if (data.leftPos) {
        card.style.left = `${data.leftPos}%`;
      }

      if (data.zIndex || data.zIndex == 0) {
        if (data.zIndex == 0) {
          card.classList.add("highlight");
        } else {
          card.classList.remove("highlight");
        }

        card.style.zIndex = data.zIndex;
      }
    }

    calcScale2(x) {
      let formula;

      if (x <= 0) {
        formula = 1 - (-1 / 5) * x;

        return formula;
      } else if (x > 0) {
        formula = 1 - (1 / 5) * x;

        return formula;
      }
    }

    calcScale(x) {
      const formula = 1 - (1 / 5) * Math.pow(x, 2);

      if (formula <= 0) {
        return 0;
      } else {
        return formula;
      }
    }

    checkOrdering(card, x, xDist) {
      const original = parseInt(card.dataset.x);
      const rounded = Math.round(xDist);
      let newX = x;

      if (x !== x + rounded) {
        if (x + rounded > original) {
          if (x + rounded > this.centerIndex) {
            newX =
              x + rounded - 1 - this.centerIndex - rounded + -this.centerIndex;
          }
        } else if (x + rounded < original) {
          if (x + rounded < -this.centerIndex) {
            newX =
              x + rounded + 1 + this.centerIndex - rounded + this.centerIndex;
          }
        }

        this.xScale[newX + rounded] = card;
      }

      const temp = -Math.abs(newX + rounded);

      this.updateCards(card, { zIndex: temp });

      return newX;
    }

    moveCards(data) {
      let xDist;

      if (data != null) {
        this.container.classList.remove("smooth-return");
        xDist = data.x / 250;
      } else {
        this.container.classList.add("smooth-return");
        xDist = 0;

        for (let x in this.xScale) {
          this.updateCards(this.xScale[x], {
            x: x,
            zIndex: Math.abs(Math.abs(x) - this.centerIndex)
          });
        }
      }
      for (let i = 0; i < this.cards.length; i++) {
        const x = this.checkOrdering(
            this.cards[i],
            parseInt(this.cards[i].dataset.x),
            xDist
          ),
          scale = this.calcScale(x + xDist),
          scale2 = this.calcScale2(x + xDist),
          leftPos = this.calcPos(x + xDist, scale2);

        this.updateCards(this.cards[i], {
          scale: scale,
          leftPos: leftPos
        });
      }
    }
  }
  const carousel = new CardCarousel(cardsContainer);
</script>
